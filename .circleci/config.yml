version: 2.1

executors:
  build-executor:
    docker:
      - image: cimg/node:lts

commands:
  checkout_and_cache:
    steps:
      - checkout
      - run:
          name: Node version
          command: node --version
      - restore_cache: # special step to restore the dependency cache
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          name: Restore NPM Package Cache
          keys:
            - npm-packages-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci
      - save_cache: # special step to save the dependency cache
          name: Save NPM Package Cache
          key: npm-packages-{{ checksum "package-lock.json" }}
          paths:
            - ~/.cache/npm
  build:
    steps:
      - run: npm run styleguide:build
  test:
    steps:
      - run:
          name: Install JUnit coverage reporter
          command: npm install --dev jest-junit
      - run:
          name: Install TSLint JUnit Formatter
          command: npm install --dev tslint-junit-formatter
      - run: # run tests
          name: Run tests with JUnit as reporter
          command: npm run test -- --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT: 'reports/junit/js-test-results.xml'
      - run:
          name: 'JavaScript and TypeScript Linter'
          command: npx eslint --config .eslintrc src/**/*.tsx --format junit -o reports/junit/js-lint-results.xml
      - run:
          name: 'Prettier check'
          command: npm run prettier:check
      - store_artifacts: # special step to save test results as as artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: reports/junit
          prefix: tests
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: reports/junit
          # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
  pre_deploy:
    steps:
      - run:
          name: Set user for commit
          command: |
            git config user.email "ci@example.com"
            git config user.name "ci"
      - add_ssh_keys:
          fingerprints:
            - '65:56:b2:97:31:13:65:be:25:ca:f6:65:51:78:a2:88'

jobs:
  test_and_build:
    executor: build-executor
    steps:
      - checkout_and_cache
      - test
      - build
  deploy:
    executor: build-executor
    steps:
      - checkout_and_cache
      - build
      - pre_deploy
      - run: npm run deploy
  deploy_dev:
    executor: build-executor
    steps:
      - checkout_and_cache
      - build
      - pre_deploy
      - run: npm run deploy-dev

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - test_and_build
      - deploy:
          requires:
            - test_and_build
          filters:
            branches:
              only: master
      - deploy_dev:
          requires:
            - test_and_build
          filters:
            branches:
              only: develop
